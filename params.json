{
  "name": "Beanshelldemo",
  "tagline": "Dynamically extend android apps",
  "body": "# What is Beanshell?\r\n[Beanshell](http://www.beanshell.org) is a small, free, embeddable Java source interpreter with object scripting language features, written in Java. BeanShell dynamically executes standard Java syntax and extends it with common scripting conveniences such as loose types, commands, and method closures like those in Perl and JavaScript.\r\n\r\n![demo](http://i.imgur.com/U3yQsta.gif)\r\n## Scripting features\r\n* Optionally typed variables.\r\n* Scripted methods with optionally typed arguments and return values\r\n* Scripted objects (method closures)\r\n* Scripted interfaces and event handlers.\r\n* Convenience syntax for working with JavaBean properties, hashtables, and primitive wrapper types.\r\n* Auto-allocation of variables to emulate Java properties files.\r\n* Extensible set of utility and shell-like commands\r\n* Dynamic classpath management including find grained class reloading\r\n* Dynamic command loading and user command path\r\n* Sophisticated namespace and callstack management\r\n* Detailed error reporting\r\n\r\n## Uses\r\n* Scripting extension for applications - Allow your applications to be extended via scripts in an intuitive and simple way.\r\n* Macro Languages - Generate scripts as macros and execute them live in your VM easily.\r\n* Expression evaluator for scientific, financial apps and rules engines - evaluate complex expressions with conditions and loops.\r\n* Remote debugging - Embed a live, remotely accessible shell / command line in your application with just a few lines of code.\r\n* Use BeanShell declaratively to replace properties files and replace startup config files with real scripts that perform complex initialization and setup with the full Java syntax at their disposal.\r\n\r\n#How to Use it\r\nThe best way to understand the power of beanshell is through an example. Let’s create a sample android app that will execute arbitrary code of user’s choice. [Get in on Github](https://github.com/GeorgeArgyrakis/beanshelldemo/)\r\n## Gradle Setup\r\nCreate a new app and add the following gradle dependency\r\n\r\n    compile 'org.beanshell:bsh:2.0b5'\r\n\r\n## Activity Layout\r\nCreate a simply layout with one edit text and one button. \r\nThe edit text will hold the java code and the button will execute it.\r\n\r\n![activity](http://i.imgur.com/TDB38MJ.png)\r\n## Initialize beanshell\r\nFirst create a new interpreter that will evaluate our scripts:\r\n\r\n    Interpreter interpreter = new Interpreter();\r\n\r\nThen of the activity we pass any variable we will refer to it directly from script:\r\n\r\n    interpreter.set(\"myapp\", this); //a reference to activity\r\n    interpreter.set(\"code\", findViewById(R.id.editTextCode));\r\n    interpreter.set(\"button\", findViewById(R.id.buttonRun));\r\n\r\nOptionally we can enable a server at [device ip]:[portnum] to remotely run commands:\r\n\r\n    interpreter.set(\"portnum\", 1234); // set port\r\n    interpreter.eval(\"setAccessibility(true)\"); // turn off access restrictions\r\n    interpreter.eval(\"server(portnum)\"); // enable server\r\n\r\n## Run Code\r\nFinally, on button click listener we will run the code in edittext:\r\n\r\n    interpreter.eval(javaCode.getText().toString());\r\n\r\n## Sample Code\r\nFollowing are some samples you can try and run inside the app:\r\n\r\n    // myapp: variable passed to the interpreter\r\n    import android.widget.Toast;  \r\n    Toast.makeText(myapp, \"This is a Toast from beanshell\", Toast.LENGTH_SHORT).show();\r\n\r\n    // code: variable passed to the interpreter\r\n    import android.support.design.widget.Snackbar;\r\n    Snackbar.make(code,\"This is a Snackbar from beanshell\",Snackbar.LENGTH_LONG).show();\r\n\r\n    // Run on UI thread`\r\n    code.post(new Runnable() {public void run() {button.setText(\\\"Changed from code\\\");} });\r\n\r\n# Telnet\r\nIf you have enabled server you can connect and run commands either at http://[device ip]:[portnum] or with telnet at [device ip]:[portnum+1]. I recommend using [putty](http://www.putty.org) with Connection Type =Raw.\r\n\r\n![putty](http://i.imgur.com/8WumqvB.png)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}